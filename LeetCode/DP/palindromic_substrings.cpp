/*
 * @Descripttion: 
 * @Author: AruNi_Lu
 * @Date: 2022-06-15 16:49:45
 */

/*
题目：
给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。
回文字符串 是正着读和倒过来读一样的字符串。
子字符串 是字符串中的由连续字符组成的一个序列。
具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。

示例 1：
输入：s = "abc"
输出：3
解释：三个回文子串: "a", "b", "c"

示例 2：
输入：s = "aaa"
输出：6
解释：6个回文子串: "a", "a", "a", "aa", "aa", "aaa"
*/

/*
DP五部曲：
    1. 确定dp数组和其下标含义
        bool类型的dp[i][j]：表示区间范围[i,j]（左闭右闭）的子串是否是回文子串，如果是dp[i][j]=true
    2. 确定递推公式
        分为两种情况：
        ·当s[i]与s[j]不相等时，则dp[i][j]=false;
        ·当s[i]与s[j]相等时，有如下三种情况：
            1) 下标i与j相同，同一个字符，例如"a"，当然是回文子串
            2) 下标i与j相差等于1，例如"aa"，也是回文子串
            3) 下标i与j相差大于1的时候，例如"cabac"，此时s[i]与s[j]已经相同了，看i到j区间是不是回文子串就看"aba"
               是不是回文就可以了，那么"aba"的区间就是i+1与j-1区间，这个区间是不是回文就看dp[i+1][j-1]是否为true。
        所以递推公式如下：
        // result 统计回文子串的数量
        if (s[i] == s[j]) {
            if (j - 1 <= 1) {   // 情况一和情况二
                result++;
                dp[i][j] = true;
            } else if (dp[i + 1][j - 1]) {  // 情况三
                result++;
                dp[i][j] = true;
            } 
        }
        // 没有列出当s[i]与s[j]不相等的时候，因为在下面dp[i][j]初始化的时候，就初始为false。
    3. dp数组的初始化
        dp[i][j]可以初始化为true么？ 当然不行，怎能刚开始就全都匹配上了。
        所以dp[i][j]初始化为false。
    4. 确定遍历顺序
        首先从递推公式可以看出，情况三是根据dp[i+1][j-1]是否为true，在对dp[i][j]进行赋值为true的。
        dp[i+1][j-1]在dp[i][j]的左下角，如下：
                        dp[i][j]
        dp[i+1][j-1]
        如果这矩阵是从上到下，从左到右遍历，那么会用到没有计算过的dp[i + 1][j - 1]，
        也就是根据不确定是不是回文的区间[i+1,j-1]，来判断了[i,j]是不是回文，那结果一定是不对的。
        所以一定要从下到上，从左到右遍历，这样保证dp[i + 1][j - 1]都是经过计算的。
    5. 举例推导dp数组
        举例，输入："aaa"，dp[i][j]状态如下：
        1   1   1
        0   1   1
        0   0   1
        图中有6个true，所以就是有6个回文子串。
        注意因为dp[i][j]的定义，所以j一定是大于等于i的，那么在填充dp[i][j]的时候一定是只填充右上半部分。
*/
class Solution {
public:
    int countSubstrings(string s) {
        vector<vector<bool>> dp(s.size(), vector<bool>(s.size(), false));
        int result = 0;
        for (int i = s.size() - 1; i >= 0; i--) {
            for (int j = i; j < s.size(); j++) {
                if (s[i] == s[j]) {
                    if (j - i <= 1) {
                        result++;
                        dp[i][j] = true;
                    } else if (dp[i + 1][j - 1]) {
                        result++;
                        dp[i][j] = true;
                    }
                }
            }
        }
        return result;
    }
};

/*
双指针法：

*/