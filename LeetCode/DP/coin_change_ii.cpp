/*
 * @Descripttion: 518. 零钱兑换 II
 * @Author: AruNi
 * @Date: 2022-06-01 21:17:09
 */


/*
题目：
给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。
请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。
假设每一种面额的硬币有无限个。     题目数据保证结果符合 32 位带符号整数。

示例 1：
输入：amount = 5, coins = [1, 2, 5]
输出：4
解释：有四种方式可以凑成总金额：
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

示例 2：
输入：amount = 3, coins = [2]
输出：0
解释：只用面额 2 的硬币不能凑成总金额 3 。

示例 3：
输入：amount = 10, coins = [10] 
输出：1
*/

/*
思路：
这是一道典型的背包问题，一看到钱币数量不限，就知道这是一个完全背包。
但本题和纯完全背包不一样，纯完全背包是能否凑成总金额，而本题是要求凑成总金额的个数！
注意题目描述中是凑成总金额的硬币组合数，为什么强调是组合数呢？
例如示例一：
5 = 2 + 2 + 1
5 = 2 + 1 + 2
这是一种组合，都是 2 2 1。
如果问的是排列数，那么上面就是两种排列了。
组合不强调元素之间的顺序，排列强调元素之间的顺序。 

DP五部曲：
    1. 确定dp数组和其下标含义
        dp[j]：凑成总金额为 j 的硬币组合数为dp[j]
    2. 确定递推公式
        dp[j]（考虑coins[i]的组合总和）就是所有的 dp[j - coins[i]]（不考虑coins[i]）相加。
        所以公式：dp[j] += dp[j - conis[i]];
    3. dp数组的初始化
        首先 dp[0] 一定要为1，dp[0] = 1 是递归公式的基础。
        从 dp[i] 的含义来讲，就是凑成总金额为0的硬币组合数为 1。
        下标非0 的 dp[j] 初始化为0，这样累加 dp[j - coins[i]] 的时候才不会影响到正真的 dp[i]
    4. 确定遍历顺序
        本题中是外层for循环遍历物品（钱币），内层for遍历背包（金钱总额），
        还是外层for遍历背包（金钱总额），内层for循环遍历物品（钱币）呢？
        在完全背包理论中谈到了完全背包的两个for循环的先后顺序都是可以的。
        但本题就不行了！
        因为纯完全背包求得是能否凑成总和，和凑成总和的元素有没有顺序没关系，即：有顺序也行，没有顺序也行！
        而本题要求凑成总和的组合数，元素之间要求没有顺序。
        所以纯完全背包是能凑成总和就行，不用管怎么凑的。
        本题是求凑出来的方案个数，且每个方案个数是为组合数。

        先来看 外层for循环遍历物品（钱币），内层for遍历背包（金钱总额）的情况。
        代码如下：
        for (int i = 0; i < coins.size(); i++) { // 遍历物品
            for (int j = coins[i]; j <= amount; j++) { // 遍历背包容量
                dp[j] += dp[j - coins[i]];
            }
        }
        假设：coins[0] = 1，coins[1] = 5。
        那么就是先把1加入计算，然后再把5加入计算，得到的方法数量只有{1, 5}这种情况。而不会出现{5, 1}的情况。
        所以这种遍历顺序中dp[j]里计算的是组合数！ 符合题意。

        如果把两个for交换顺序，代码如下：
        for (int j = 0; j <= amount; j++) { // 遍历背包容量
            for (int i = 0; i < coins.size(); i++) { // 遍历物品
                if (j - coins[i] >= 0) {
                    dp[j] += dp[j - coins[i]];
                }
            }
        }
        背包容量的每一个值，都是经过 1 和 5 的计算，包含了{1, 5} 和 {5, 1}两种情况。
        此时dp[j]里算出来的就是排列数！ 不符合题意。
    5. 举例推导过程
        输入: amount = 5, coins = [1, 2, 5] ，dp状态图：https://img-blog.csdnimg.cn/20210120181331461.jpg
        最后红色框dp[amount]为最终结果。
*/
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int> dp(amount + 1, 0);
        dp[0] = 1;
        for (int i = 0; i < coins.size(); i++) {    // 遍历物品
            for (int j = coins[i]; j <= amount; j++) {      // 遍历背包
                dp[j] += dp[j - coins[i]];
            }
        }
        return dp[amount];
    }
};
