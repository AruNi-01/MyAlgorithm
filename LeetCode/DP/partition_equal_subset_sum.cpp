/*
 * @Descripttion: 416. 分割等和子集
 * @Author: AruNi
 * @Date: 2022-05-29 21:17:44
 */


/*
题目：
给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，
使得两个子集的元素和相等。
提示：
    1 <= nums.length <= 200
    1 <= nums[i] <= 100

示例 1：
输入：nums = [1,5,11,5]
输出：true
解释：数组可以分割成 [1, 5, 5] 和 [11] 。

示例 2：
输入：nums = [1,2,3,5]
输出：false
解释：数组不能分割成两个元素和相等的子集。
*/

/*
思路：
这道题目是要找是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。
那么只要找到集合里能够出现 sum / 2 的子集总和，就算是可以分割成两个相同元素和子集了。
本题是可以用回溯暴力搜索出所有答案的，但最后超时了，也不想再优化了，放弃回溯，直接上01背包吧。

要明确本题中我们要使用的是01背包，因为元素我们只能用一次。
回归主题：首先，本题要求集合里能否出现总和为 sum / 2 的子集。
那么来一一对应一下本题，看看背包问题如果来解决。

只有确定了如下四点，才能把01背包问题套到本题上来。
    ·背包的体积为sum / 2
    ·背包要放入的商品（集合里的元素）重量为 元素的数值，价值也为元素的数值
    ·背包如果正好装满，说明找到了总和为 sum / 2 的子集
    ·背包中每一个元素是不可重复放入
以上分析完，就可以套用01背包，来解决这个问题了。

DP五部曲：
    1. 确定dp数组以及下标的含义
        01背包中，dp[j]表示：容量为j的背包，所背的物品最大价值为dp[j]。
        套到本题，dp[j]表示：背包总容量是j，可以凑成j的子集总和最大为dp[j]。
    2. 确定递推公式
        01背包的递推公式为：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
        本题，相当于背包里放入数值，那么物品i的重量是nums[i]，其价值也是nums[i]。
        所以递推公式：dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
    3. dp数组的初始化
        在01背包，一维dp如何初始化，已经讲过，从dp[j]的定义来看，首先dp[0]一定是0。
        如果如果题目给的价值都是正整数那么非0下标都初始化为0就可以了，如果题目给的价值有负数，
        那么非0下标就要初始化为负无穷。
        这样才能让dp数组在递归公式的过程中取的最大的价值，而不是被初始值覆盖了。
        本题题目中 只包含正整数的非空数组，所以非0下标的元素初始化为0就可以了。
        代码如下：
        // 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200
        // 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了
        vector<int> dp(10001, 0);
    4. 确定遍历顺序
        在01背包中就已经说明：如果使用一维dp数组，物品遍历的for循环放在外层，
        遍历背包的for循环放在内层，且内层for循环倒序遍历！
        代码如下：
        for(int i = 0; i < nums.size(); i++) {
            for(int j = target; j >= nums[i]; j--) { // 每一个元素一定是不可重复放入，所以从大到小遍历
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }
    5. 举例推导dp数组
        dp[j]的数值一定是小于等于j的。
        如果dp[j] == j 说明，集合中的子集总和正好可以凑成总和j，理解这一点很重要。
        用例1，输入[1,5,11,5] 为例，如图：https://img-blog.csdnimg.cn/20210110104240545.png
        最后dp[11] == 11，说明可以将这个数组分割成两个子集，使得两个子集的元素和相等。
        
*/
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;

        // dp[i] 中的i 表示背包内总和
        // 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200
        // 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了
        vector<int> dp(10001, 0);
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        // 总和除以2除不尽，肯定不能分成两段
        if (sum % 2 == 1) return false;
        // 背包容量为sum/2
        int target = sum / 2;

        // 开始01背包
        for (int i = 0; i < nums.size(); i++) {
            for (int j = target; j >= nums[i]; j--) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }

        // 集合中的元素正好可以凑成总和target
        if (dp[target] == target) return true;
        return false;
    }
};