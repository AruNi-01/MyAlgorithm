/*
 * @Descripttion: 746. 使用最小花费爬楼梯
 * @Author: AruNi
 * @Date: 2022-05-26 16:24:09
 */


/*
题目：
给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。
一旦你支付此费用，即可选择向上爬一个或者两个台阶。
你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。请你计算并返回达到楼梯顶部的最低花费。

示例 1：
输入：cost = [10,15,20]
输出：15
解释：你将从下标为 1 的台阶开始。
- 支付 15 ，向上爬两个台阶，到达楼梯顶部。
总花费为 15 。

示例 2：
输入：cost = [1,100,1,1,1,100,1,1,100,1]
输出：6
解释：你将从下标为 0 的台阶开始。
- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
- 支付 1 ，向上爬一个台阶，到达楼梯顶部。
总花费为 6 。
*/

/*
DP五部曲：
    1. 确定dp数组和其下标的含义
        dp[i]：到达第i个台阶需要花费的最少体力为dp[i]（第一步一定是要花费的）
    2. 确定递推公式
        可以有2个途径得到dp[i]，一个是dp[i-1]，一个是dp[i-2]，选择哪个？当然是最小的。
        所以dp[i] = min(dp[i-1], dp[i-2]) + cost[i];    注意：需要加上体力cost[i]
    3. dp数组如何初始化
        dp[i] 是由 dp[i-1]和dp[i-2]推出，所以只需要初始化dp[0]和dp[1]就够了，其他的最终都是由此推出。
        dp[0] = cost[0];    dp[1] = cost[1];
    4. 确定遍历顺序
        从前往后遍历即可。
    5. 举例推导dp数组
        示例：cost = [1,100,1,1,1,100,1,1,100,1]，模拟dp数组的状态变化，如下：
        下标i   0   1   2   3   4   5   6   7   8   9
        dp[i]   1  100  2  3   3   103  4   5  104  6
*/
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size());
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < cost.size(); i++) {
            dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];
        }
        // 注意最后一步可以理解为不用花费，所以取倒数第一步，第二步的最少值
        return min(dp[cost.size() - 1], dp[cost.size() - 2]);
    }
};