/*
 * @Descripttion: 714. 买卖股票的最佳时机含手续费
 * @Author: AruNi
 * @Date: 2022-05-24 20:44:15
 */

/*
题目：
给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。
你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，
在卖出它之前你就不能再继续购买股票了。返回获得利润的最大值。
注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

示例 1：
输入：prices = [1, 3, 2, 8, 4, 9], fee = 2
输出：8
解释：能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8

示例 2：
输入：prices = [1,3,7,5,10,3], fee = 3
输出：6
*/

/*
思路：
使用贪心策略，就是最低值买，最高值（如果算上手续费还盈利）就卖。

此时无非就是要找到两个点，买入日期，和卖出日期。
    买入日期：遇到更低点就记录一下。
    卖出日期：没有必要算出准确的卖出日期，只要当前价格大于（最低价格+手续费），
             就可以收获利润，至于准确的卖出日期，就是连续收获利润区间里的最后
             一天（并不需要计算是具体哪一天）。

所以在做收获利润操作的时候其实有2种情况：
    情况一：收获利润的这一天并不是收获利润区间里的最后一天（不是真正的卖出，相当于持有股票），所以后面要继续收获利润。
    情况二：前一天是收获利润区间里的最后一天（相当于真正的卖出了），今天要重新记录最小价格了。
*/
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int result = 0;
        int minPrice = prices[0];   // 记录最低价格
        for (int i = 1; i < prices.size(); i++) {
            // 情况二，若当前price比minPrice还低，则买入--记录最低价格
            if (prices[i] < minPrice) {
                minPrice = prices[i];
            }

            // 计算利润，可能有多次计算利润，最后一次计算利润才是真正意义的卖出
            if (prices[i] > minPrice + fee) {
                result += prices[i] - minPrice - fee;
                minPrice = prices[i] - fee; // 情况一
            }
        }
        return result;
    }
};