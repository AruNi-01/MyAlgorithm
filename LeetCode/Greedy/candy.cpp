/*
 * @Descripttion: 135. 分发糖果
 * @Author: AruNi
 * @Date: 2022-05-20 18:23:06
 */

/*
题目：
n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。
你需要按照以下要求，给这些孩子分发糖果：
    每个孩子至少分配到 1 个糖果。
    相邻两个孩子评分更高的孩子会获得更多的糖果。
请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。

示例 1：
输入：ratings = [1,0,2]
输出：5
解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。

示例 2：
输入：ratings = [1,2,2]
输出：4
解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。
     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。
*/

/*
贪心算法：
    因为相邻两个孩子评分更高的孩子会获得更多的糖果，所以一定是要确定一边之后，再确定另一边，
    例如比较每一个孩子的左边，然后再比较右边，如果两边一起考虑一定会顾此失彼。

先确定右边评分大于左边的情况（也就是从前向后遍历）
    此时局部最优：只要右边评分比左边大，右边的孩子就多一个糖果，
    全局最优：相邻的孩子中，评分高的右孩子获得比左边孩子更多的糖果

再确定左孩子大于右孩子的情况（从后向前遍历），为什么不能从前向后遍历呢？
因为如果从前向后遍历，根据 ratings[i + 1] 来确定 ratings[i] 对应的糖果，
那么每次都不能利用上前一次的比较结果了。
如果 ratings[i] > ratings[i + 1]，此时candyVec[i]（第i个小孩的糖果数量）就有
两个选择了，一个是candyVec[i + 1] + 1（从右边这个加1得到的糖果数量），一个是
candyVec[i]（之前比较右孩子大于左孩子得到的糖果数量）。
那么又要贪心了：
    局部最优：取candyVec[i + 1] + 1 和 candyVec[i] 最大的糖果数量，保证第i个
             小孩的糖果数量即大于左边的也大于右边的。
    全局最优：相邻的孩子中，评分高的孩子获得更多的糖果。
*/
class Solution {
public:
    int candy(vector<int>& ratings) {
        int result = 0;
        vector<int> candyVec(ratings.size(), 1);    // 初始化没人获得一颗糖果
        // 先考虑右边大于左边的情况，从前往后遍历
        for (int i = 1; i < ratings.size(); i++) {
            if (ratings[i] > ratings[i - 1]) candyVec[i] = candyVec[i - 1] + 1;
        }

        // 再考虑左边大于右边的情况，从后往前遍历
        for (int i = ratings.size() - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                // 糖果数量取 当前数量 和 右边数量 + 1 的最大值
                candyVec[i] = max(candyVec[i], candyVec[i + 1] + 1);
            }
        }

        for (int i = 0; i < candyVec.size(); i++) {
            result += candyVec[i];
        }
        return result;
    }
};