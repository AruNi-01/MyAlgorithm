/*
 * @Descripttion: 452. 用最少数量的箭引爆气球
 * @Author: AruNi
 * @Date: 2022-05-20 19:29:19
 */

/*
题目：
有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 points ，
其中points[i] = [xstart, xend] 表示水平直径在 xstart 和 xend之间的气球。你不知道气球的确切 y 坐标。

一支弓箭可以沿着 x 轴从不同点 完全垂直 地射出。在坐标 x 处射出一支箭，若有一个气球的直径
的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被 引爆 。可以
射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。

给你一个数组 points ，返回引爆所有气球所必须射出的 最小 弓箭数 。

示例 1：
输入：points = [[10,16],[2,8],[1,6],[7,12]]
输出：2
解释：气球可以用2支箭来爆破:
-在x = 6处射出箭，击破气球[2,8]和[1,6]。
-在x = 11处发射箭，击破气球[10,16]和[7,12]。

示例 2：
输入：points = [[1,2],[3,4],[5,6],[7,8]]
输出：4
解释：每个气球需要射出一支箭，总共需要4支箭。

示例 3：
输入：points = [[1,2],[2,3],[3,4],[4,5]]
输出：2
解释：气球可以用2支箭来爆破:
- 在x = 2处发射箭，击破气球[1,2]和[2,3]。
- 在x = 4处射出箭，击破气球[3,4]和[4,5]。
*/

/*
贪心算法：
    局部最优：当气球出现重叠，一起射，所用弓箭最少。
    全局最优：把所有气球射爆所用弓箭最少

为了让气球尽可能的重叠，需要对数组进行排序。
可以按照起始位置排序，那么就从前向后遍历气球数组，靠左尽可能让气球重复
当遇到重叠的气球时，重叠气球中右边边界的最小值 之前的区间一定需要一个弓箭
*/
class Solution {
private:
    static bool cmp(const vector<int>& a, const vector<int>& b) {
        return a[0] < b[0];     // 按起始位置升序
    }
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        if (points.size() == 0) return 0;
        sort(points.begin(), points.end(), cmp);
        int result = 1;     // points 不为空至少需要一支箭
        for (int i = 1; i < points.size(); i++) {
            // 若 气球i 的左边界比 气球i-1 的右边界大时，说明两气球不重叠(等于也算重叠)，需要一支箭了
            if (points[i][0] > points[i - 1][1]) {
                result++;
            } else {    // 气球i 和 气球i-1 重叠，需要更新最小右边界，取两气球右边界的最小值即可
                points[i][1] = min(points[i][1], points[i - 1][1]);
            }
        }
        return result;
    }
};